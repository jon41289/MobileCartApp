@page "/Cocktail"
@page "/Cocktail/{id:int}"
@using MobileCart.Services
@inject ICocktailService CocktailService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


@if(Id is null)
{
  <PageTitle>Create a new Cocktail</PageTitle>
  <h3>Create a new Cocktail</h3>
}
else
{
  <PageTitle>Display @myCocktail.Name</PageTitle>
  <h3> @myCocktail.Name</h3>
}

<EditForm Model="myCocktail" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="mb-3">
      <label for="Name" class="form-label">Name</label>
      <InputText class="form-control" id="Name" @bind-Value="@myCocktail.Name" required/>
    </div>

    <div class="mb-3">
      <label for="Rating" class="form-label">Rating</label>
      @* <InputNumber class="form-control" id="Rating" min="1" max="5" @bind-Value="@myCocktail.Rating" required/> *@
      <input type="range" class="form-range" min="1" max="5" @bind="@myCocktail.Rating" >
    </div>

    <div class="mb-3">
      <label for="MainSpirts" class="form-label">MainSpirts</label>
      <InputText class="form-control" id="MainSpirts" @bind-Value="@myCocktail.MainSpirt" required/>
    </div>

    <div class="mb-3">
      <label for="Flavor" class="form-label">Flavor</label>
      <InputText class="form-control" id="Flavor" @bind-Value="@myCocktail.Flavor" required/>
    </div>

     <div class="mb-3">
      <label for="SkillLevel" class="form-label">SkillLevel</label>
      @* <InputNumber class="form-control" id="SkillLevel" min="1" max="5" @bind-Value="@myCocktail.SkillLevel" required/> *@
      <input type="range" class="form-range" min="1" max="3" @bind="@myCocktail.SkillLevel" >
    </div>

    <div class="mb-3">
      <label for="Description" class="form-label">Description</label>
      <InputTextArea class="form-control" id="Description" @bind-Value="@myCocktail.Discription" required/>
    </div>

    <div class="mb-3">
      <label for="Ingredients" class="form-label">Ingredients</label>
      <InputTextArea class="form-control" id="Ingredients" @bind-Value="@myCocktail.Ingredients" required/>
    </div>

     <div class="mb-3">
      <label for="Instructions" class="form-label">Instructions</label>
      <InputTextArea class="form-control" id="Instructions" @bind-Value="@myCocktail.Instructions" required/>
    </div>

    <button type="submit" class="btn btn-primary btn-fully">@btnText</button>
    <button type="submit" class="btn btn-danger btn-fully" @onclick="DeleteCocktail">DeleteCocktail</button>
</EditForm>

  <div class="" style="width: 18rem;">
    <div class="mb-5">
      <hr>
      <div class="row mb-2"><div class="col col-auto fw-bold"> Rating :</div> @myCocktail.Rating<div class="col"></div></div>
      <div class="row mb-2"><div class="col col-auto fw-bold">Main Spirt:</div>@myCocktail.MainSpirt<div class=col></div></div>
      <div class="row mb-2"><div class="col col-auto fw-bold">Flavor:</div>@myCocktail.Flavor<div class=col></div></div>
      <div class="row mb-2"><div class="col col-auto fw-bold">Skill Level:</div>@myCocktail.SkillLevel<div class=col></div></div>
      <div class="row mb-2"><div class="col col-auto fw-bold">Description:<hr/></div>@myCocktail.Discription<div class=col></div></div>
      <div class="row mb-2"><div class="col col-auto fw-bold">Ingredients:<hr/></div>@myCocktail.Ingredients<div class=col></div></div>
      <div class="row mb-2"><div class="col col-auto fw-bold">Instructions:<hr/></div>@myCocktail.Instructions<div class=col></div></div>


    </div>
  </div>

@code {
    [Parameter]
    public int? Id { get; set; }

    ModelsLibrary.Cocktails? myCocktail = 
    new ModelsLibrary.Cocktails {Name = "New Cocktail"}; 

    string btnText = string.Empty;

    protected override void OnInitialized(){
      btnText = Id == null ? "save new Cocktail" : "update Cocktail";
    }    
   protected override async Task OnParametersSetAsync()
   {
      //TODO DEBUG INVALID ID 
      if(Id is not null)
      {
        var result = await CocktailService.GetCocktailsByID((int)Id);
        if(result is not null)
          myCocktail = result;
        else
          NavigationManager.NavigateTo("/Cocktail");
      }
   }
 
  async Task HandleSubmit()
  {
    if(Id is null)
      await CocktailService.CreateCocktail(myCocktail);
    else
      await CocktailService.UpdateCocktails((int)Id, myCocktail);
  }

  async Task DeleteCocktail()
  {
    await CocktailService.DeleteCocktail(myCocktail.Id);
  }
}